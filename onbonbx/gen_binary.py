# -*- coding: utf-8 -*-
# 偏移    字段                  长度          默认值     描述
# 0x0000  FileType              2           0x8000  文件类型（0x8000 ORD 文件）
# 0x0002  Version               1           0x10    文件定义版本号
# 0x0003  Reserved              61          0x00    保留字
# 0x0040  PreviewWidth          2           0x0000  预览图参考宽度
# 0x0042  PreviewHeight         2           0x0000  预览图参考高度
# 0x0044  BlockCount            2           0x0000  光带段数
# 0x0046  Reserved              10          0x00    保留字
# 0x0050  Reserved              48          0x00    保留字

# 0x0080  Block0 PixCount       2           0x01,0x00  Block0 像素点数
# 0x0082  Block0 DefaultColor   3           R,G,B  Block0 默认颜色
# 0x0085  Reserved              11          0x00    保留字
# 0x0090  Block0Data            N           0x01,0x00  可变 Block0 像素点数
# 其它 Block 数据
#         FileCrc               4           0x00  前面所有数据的和较验



import struct
import binascii
import zlib


class crc16:
    auchCRCHi = [0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
                 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, \
                 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, \
                 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, \
                 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, \
                 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, \
                 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, \
                 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, \
                 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, \
                 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, \
                 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, \
                 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, \
                 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, \
                 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, \
                 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, \
                 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, \
                 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, \
                 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, \
                 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, \
                 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, \
                 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, \
                 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, \
                 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, \
                 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, \
                 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, \
                 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40]

    auchCRCLo = [0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, \
                 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, \
                 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, \
                 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, \
                 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4, \
                 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, \
                 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, \
                 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, \
                 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, \
                 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, \
                 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, \
                 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, \
                 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, \
                 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, \
                 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, \
                 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, \
                 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, \
                 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, \
                 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, \
                 0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, \
                 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, \
                 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, \
                 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, \
                 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, \
                 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, \
                 0x43, 0x83, 0x41, 0x81, 0x80, 0x40]

    def __init__(self):
        pass

    def createcrc(self, array):
        crchi = 0xff
        crclo = 0xff
        for i in range(0, len(array)):
            crcIndex = crchi ^ array[i]
            crchi = crclo ^ self.auchCRCHi[crcIndex]
            crclo = self.auchCRCLo[crcIndex]
        return (crchi << 8 | crclo)

    def createarray(self, array):
        crcvalue = self.createcrc(array)
        array.append(crcvalue >> 8)
        array.append(crcvalue & 0xff)
        return array

    def calcrc(self, array):
        crchi = 0xff
        crclo = 0xff
        lenarray = len(array)
        for i in range(0, lenarray - 2):
            crcIndex = crchi ^ array[i]
            crchi = crclo ^ self.auchCRCHi[crcIndex]
            crclo = self.auchCRCLo[crcIndex]
        if crchi == array[lenarray - 2] and crclo == array[lenarray - 1]:
            return 0
        else:
            return 1


test = crc16()
array = [1, 2, 3]
print test.createcrc(array), "\n"
array1 = test.createarray(array)
print test.calcrc(array1)


def getFileCRC(_path, length):
    blocksize = length
    f = open(_path, "rb")
    str = f.read(blocksize)
    crc = crc16(str, False)
    f.close()
    return crc


if __name__ == "__main__":
    getFileCRC("R000", 1)
    # import zlib
    #
    #
    # def crc32(st):
    #     crc = zlib.crc32(st)
    #     if crc > 0:
    #         return "%x" % (crc)
    #     else:
    #         return "%x" % (~crc ^ 0xffffffff)
    #
    #
    # ex1 = "12345"
    # ex2 = "1kcaseztsa12345azy"
    #
    # print "%x" % zlib.crc32(ex1)
    # print crc32(ex1)
    # print "%x" % zlib.crc32(ex2)
    # print crc32(ex2)
    # WriteFileData = open('1.dat', 'wb')
    #
    # FileType = 0x8000
    # WriteFileData.write(struct.pack("H", FileType))
    #
    # Version = 0x10
    # WriteFileData.write(struct.pack("B", Version))
    #
    # Reserved = 0x00
    # for i in xrange(61):
    #     WriteFileData.write(struct.pack("B", Reserved))
    #
    # PreviewWidth = 128
    # WriteFileData.write(struct.pack("H", PreviewWidth))
    #
    # PreviewHeight = 96
    # WriteFileData.write(struct.pack("H", PreviewHeight))
    #
    # BlockCount = 0x00
    # WriteFileData.write(struct.pack("H", BlockCount))
    #
    # Reserved = 0x00
    # for i in xrange(10 + 48):
    #     WriteFileData.write(struct.pack("B", Reserved))
    #
    # Block0_PixCount = 0x01
    # WriteFileData.write(struct.pack("H", Block0_PixCount))
    #
    # DefaultColor_R = 0xff
    # WriteFileData.write(struct.pack("B", DefaultColor_R))
    # DefaultColor_G = 0x00
    # WriteFileData.write(struct.pack("B", DefaultColor_G))
    # DefaultColor_B = 0x00
    # WriteFileData.write(struct.pack("B", DefaultColor_B))
    #
    # Reserved = 0x00
    # for i in xrange(11):
    #     WriteFileData.write(struct.pack("B", Reserved))
    #
    # WriteFileData.close()
